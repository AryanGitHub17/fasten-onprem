// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_base is a generated GoMock package.
package mock_base

import (
	reflect "reflect"

	database "github.com/fastenhealth/fastenhealth-onprem/backend/pkg/database"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockClient) GetRequest(resourceSubpath string, decodeModelPtr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", resourceSubpath, decodeModelPtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockClientMockRecorder) GetRequest(resourceSubpath, decodeModelPtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockClient)(nil).GetRequest), resourceSubpath, decodeModelPtr)
}

// SyncAll mocks base method.
func (m *MockClient) SyncAll(db database.DatabaseRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAll", db)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAll indicates an expected call of SyncAll.
func (mr *MockClientMockRecorder) SyncAll(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAll", reflect.TypeOf((*MockClient)(nil).SyncAll), db)
}
